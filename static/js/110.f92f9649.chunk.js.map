{"version":3,"file":"static/js/110.f92f9649.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/profileInfo/ProfileStatusWithHooks.tsx","components/profile/profileInfo/ProfileDataForm.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?000b","webpack://samurai-way/./src/components/profile/myPosts/post/Post.module.css?fa80","components/profile/myPosts/post/Post.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfoImg\":\"ProfileInfo_profileInfoImg__R49Ll\",\"mainPhoto\":\"ProfileInfo_mainPhoto__41t8k\",\"contact\":\"ProfileInfo_contact__laOk-\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div><b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || '------'}</span></div>\r\n                : <div><input type=\"text\" autoFocus onChange={onStatusChange} onBlur={deActivateEditMode} value={status} /></div>\r\n            }\r\n        </div>\r\n    )\r\n}","import s from './ProfileInfo.module.css';\r\nimport style from '../../common/formsControl/FormsControl.module.css'\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { ProfileType } from \"../../../redux/profile-reducer\"\r\nimport { Input, Textarea, createField } from \"../../common/formsControl/FormsControl\"\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }: InjectedFormProps<ProfileType, PropsType> & PropsType) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button onClick={() => { }}>Save</button>\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <b>{createField('Full name', 'fullName', [], Input)}</b>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key}>\r\n                        <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { ChangeEvent, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/jizn.webp';\r\nimport { ContactsType, ProfileType } from '../../../redux/profile-reducer';\r\nimport { Preloader } from '../../common/preloader/Preloader';\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHooks';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photos: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo = ({ profile, status, isOwner, updateUserStatus, savePhoto, saveProfile }: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.profileInfoImg} src='https://sun9-12.userapi.com/impg/UvVPRI_LiSEp-kOwFQlLDeH37AOhq36mJVSFKg/QKcTyKChz3g.jpg?size=1920x1080&quality=96&sign=a11517a8914c7e7ba6a08784dca2abfe&type=album' alt='love' />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt='smallPhoto' className={s.mainPhoto} />\r\n                {isOwner && <input type='file' onChange={onMainPhotoSelected} />}\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />\r\n                }\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n            <div>\r\n                <b>{profile.fullName}</b>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>:\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => <Contact\r\n                    key={key}\r\n                    contactTitle={key}\r\n                    contactValue={profile.contacts[key as keyof ContactsType]} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = ({ contactTitle, contactValue }: PropsType) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__O0xC2\",\"posts\":\"MyPosts_posts__yhxIW\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__cwY0r\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\nexport const Post = ({message, likesCounts, ...restProps}: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://sun9-60.userapi.com/impg/YdOcbH3mO846v2o4vHTD58R7cG0beppAXgKjXQ/P2dWvkdSoBU.jpg?size=512x512&quality=96&sign=b6e76ea19bb4a2c9237f3d552869684b&type=album' alt='bg-bear' />\r\n            {message}\r\n            <div>\r\n                <span>Like</span> {likesCounts}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, { memo } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport { Post } from './post/Post';\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Input } from '../../common/formsControl/FormsControl';\r\n\r\ntype AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nexport const MyPosts = memo(({ posts, addPost }: MyPostsPropsType) => {\r\n    console.log('myPosts render');\r\n\r\n    let postsElements = posts.map(p => <Post key={p.id} id={p.id} message={p.post} likesCounts={p.likesCount} />);\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    type='textarea'\r\n                    name='newPostText'\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength15]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesType>({ form: 'profileAddNewPostForm' })(AddNewPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport { PostType, addPost } from '../../../redux/profile-reducer';\r\nimport { AppRootStateType } from '../../../redux/redux-store';\r\nimport { MyPosts } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect (mapStateToProps, {addPost}) (MyPosts);","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport { ProfileInfo } from './profileInfo/ProfileInfo';\r\nimport { MyPostsContainer } from './myPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photos: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile = ({ profile, status, isOwner, updateUserStatus, savePhoto, saveProfile }: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus} isOwner={isOwner} savePhoto={savePhoto} saveProfile={saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React, { ComponentType } from \"react\"\r\nimport { Profile } from \"./Profile\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { ProfileType, getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus } from \"../../redux/profile-reducer\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType, any> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getUserStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<any>, snapshot?: any): void {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photos: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type ProfilePagePropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilePagePropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, { ComponentType } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\n\r\nexport const withAuthRedirect = (Component: ComponentType<any>) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","type","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","onDoubleClick","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","style","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","s","src","alt","photos","large","userPhoto","files","length","initialValues","formData","then","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","Post","message","likesCounts","maxLength15","maxLengthCreator","MyPosts","memo","posts","addPost","console","log","postsElements","p","id","post","likesCount","AddNewPostReduxForm","values","newPostText","Field","component","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","Number","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","withRouter","withAuthRedirect","Component","RedirectComponent","to","mapStateToPropsForRedirect","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}