{"version":3,"file":"static/js/687.13e82ba3.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/profileInfo/ProfileInfo.module.css?df08","components/profile/profileInfo/ProfileStatusWithHooks.tsx","components/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/myPosts/MyPosts.module.css?000b","webpack://samurai-way/./src/components/profile/myPosts/post/Post.module.css?fa80","components/profile/myPosts/post/Post.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/myPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfoImg\":\"ProfileInfo_profileInfoImg__R49Ll\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div><span onDoubleClick={activateEditMode}>{props.status || '------'}</span></div>\r\n                : <div><input type=\"text\" autoFocus onChange={onStatusChange} onBlur={deActivateEditMode} value={status} /></div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { ProfileType } from '../../../redux/profile-reducer';\r\nimport { Preloader } from '../../common/preloader/Preloader';\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({ profile, status, updateUserStatus }: ProfileInfoPropsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.profileInfoImg} src='https://sun9-12.userapi.com/impg/UvVPRI_LiSEp-kOwFQlLDeH37AOhq36mJVSFKg/QKcTyKChz3g.jpg?size=1920x1080&quality=96&sign=a11517a8914c7e7ba6a08784dca2abfe&type=album' alt='love' />\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.small} alt='smallPhoto' />\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus} />\r\n                <p>{profile.fullName}</p>\r\n                <input type='checkbox' checked={profile.lookingForAJob} />\r\n                <p>{profile.lookingForAJobDescription}</p>\r\n                {JSON.stringify(profile.contacts)}\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__O0xC2\",\"posts\":\"MyPosts_posts__yhxIW\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__cwY0r\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\nexport const Post = ({message, likesCounts, ...restProps}: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://sun9-60.userapi.com/impg/YdOcbH3mO846v2o4vHTD58R7cG0beppAXgKjXQ/P2dWvkdSoBU.jpg?size=512x512&quality=96&sign=b6e76ea19bb4a2c9237f3d552869684b&type=album' alt='bg-bear' />\r\n            {message}\r\n            <div>\r\n                <span>Like</span> {likesCounts}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, { memo } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport { Post } from './post/Post';\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Input } from '../../common/formsControl/FormsControl';\r\n\r\ntype AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nexport const MyPosts = memo(({ posts, addPost }: MyPostsPropsType) => {\r\n    console.log('myPosts render');\r\n\r\n    let postsElements = posts.map(p => <Post key={p.id} id={p.id} message={p.post} likesCounts={p.likesCount} />);\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    type='textarea'\r\n                    name='newPostText'\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength15]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesType>({ form: 'profileAddNewPostForm' })(AddNewPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport { PostType, addPost } from '../../../redux/profile-reducer';\r\nimport { AppRootStateType } from '../../../redux/redux-store';\r\nimport { MyPosts } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect (mapStateToProps, {addPost}) (MyPosts);","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport { ProfileInfo } from './profileInfo/ProfileInfo';\r\nimport { MyPostsContainer } from './myPosts/MyPostsContainer';\r\nimport { ProfilePagePropsType } from './ProfileContainer';\r\n\r\nexport const Profile = (state: ProfilePagePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={state.profile} status={state.status} updateUserStatus={state.updateUserStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};","import React, { ComponentType } from \"react\"\r\nimport { Profile } from \"./Profile\";\r\nimport { AppRootStateType } from \"../../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { ProfileType, getUserProfile, getUserStatus, updateUserStatus } from \"../../redux/profile-reducer\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType, any> {\r\n\r\n    componentDidMount(): void {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getUserStatus(userId as number)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus} />\r\n        )\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    autorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport type ProfilePagePropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & ProfilePagePropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)","import React, { ComponentType } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\n\r\nexport const withAuthRedirect = (Component: ComponentType<any>) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","type","autoFocus","onChange","e","currentTarget","value","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","className","s","src","alt","photos","small","fullName","checked","lookingForAJob","lookingForAJobDescription","JSON","stringify","contacts","Preloader","Post","message","likesCounts","maxLength15","maxLengthCreator","MyPosts","memo","posts","addPost","console","log","postsElements","map","p","id","post","likesCount","AddNewPostReduxForm","onSubmit","values","newPostText","reduxForm","form","handleSubmit","Field","component","Input","name","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","Number","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","React","compose","auth","isAuth","withRouter","withAuthRedirect","Component","RedirectComponent","to","mapStateToPropsForRedirect","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}