{"version":3,"file":"static/js/659.e6ae1c39.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCQpMA,EAAa,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAEpBC,EAAO,YAFgD,EAA7BC,GAI9B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,OCRnBM,EAAU,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QACrB,OACI,gBAAKJ,UAAWC,EAAAA,QAAhB,SAA4BG,K,uCCI9BC,GAAcC,EAAAA,EAAAA,GAAiB,IA8C/BC,GAAsBC,EAAAA,EAAAA,GAAoC,CAAEC,KAAM,wBAA5CD,EAnBkD,SAACE,GAC3E,OACI,kBAAMV,UAAWC,EAAAA,eAAkBU,SAAUD,EAAME,aAAnD,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,UAAWC,EAAAA,GACXlB,KAAK,iBACLmB,KAAK,WACLC,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUd,QAG7B,0BACI,qD,oBC7BhB,GAAee,E,QAAAA,KACXC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,eAKG,CAACC,WAAAA,EAAAA,IAC3BC,EAAAA,EAFJ,EDTuB,SAAC,GAAmD,IAAjDF,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,WAE/BE,EAAkBH,EAAYI,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACjC,EAAD,CAAuBG,GAAI8B,EAAE9B,GAAIF,KAAMgC,EAAEhC,MAAxBgC,EAAE9B,OAElE+B,EAAmBP,EAAYQ,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC7B,EAAD,CAAoBC,QAAS4B,EAAE5B,SAAjB4B,EAAEjC,OAMrE,OACI,0BACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKyB,KAEL,iBAAK1B,UAAWC,EAAAA,SAAhB,UACK6B,GACD,SAACvB,EAAD,CAAqBI,SAZf,SAACsB,GACnBT,EAAWS,EAAOC,+B,iJEjBbT,EAAmB,SAACU,GAAmC,IAC1DC,EADyD,0IAE3D,WACI,OAAKC,KAAK3B,MAAM4B,QAET,SAACH,GAAD,UAAeE,KAAK3B,SAFI,SAAC,KAAD,CAAUR,GAAI,eAHU,GAC/BqC,EAAAA,WAShC,OAFuClB,EAAAA,EAAAA,IAAQmB,EAARnB,CAAqCe,IAS1EI,EAA6B,SAAClB,GAChC,MAAO,CACHgB,OAAQhB,EAAMmB,KAAKH","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-UYA3\",\"dialogsItems\":\"Dialogs_dialogsItems__dH4Cb\",\"active\":\"Dialogs_active__rld3E\",\"dialog\":\"Dialogs_dialog__Jwgga\",\"messages\":\"Dialogs_messages__ckDDg\",\"message\":\"Dialogs_message__yF8KH\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number \r\n}\r\n\r\nexport const DialogItem = ({name, id}: DialogItemPropsType) => {\r\n\r\n    let path = \"/dialogs/\" + id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message}: MessagePropsType) => {\r\n    return(\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport { DialogItem } from './dialogItem/DialogItem';\r\nimport { Message } from './message/Message';\r\nimport { DialogsPropsType } from './DialogsContainer';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Input } from '../common/formsControl/FormsControl';\r\n\r\ntype AddMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nexport const Dialogs = ({ dialogsPage, addMessage }: DialogsPropsType) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} />);\r\n\r\n    let messagesElements = dialogsPage.messages.map(m => <Message key={m.id} message={m.message} />);\r\n\r\n    const addNewMessage = (values: AddMessageFormValuesType) => {\r\n        addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                    <AddMessageFormRedux onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormValuesType>> = (props: any) => {\r\n    return (\r\n        <form className={s.addMessageForm} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    name='newMessageBody'\r\n                    type='textarea'\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength30]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormValuesType>({ form: 'dialogAddMessageForm' })(AddMessageForm)","import React, { ComponentType } from 'react';\r\nimport { DialogsPageType, addMessage } from '../../redux/dialogs-reducer';\r\nimport { AppRootStateType } from '../../redux/redux-store';\r\nimport { Dialogs } from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect (mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, { ComponentType } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppRootStateType } from '../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\n\r\nexport const withAuthRedirect = (Component: ComponentType<any>) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppRootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}"],"names":["DialogItem","name","path","id","className","s","to","Message","message","maxLength30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Input","type","placeholder","validate","required","compose","connect","state","dialogsPage","addMessage","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","newMessageBody","Component","RedirectComponent","this","isAuth","React","mapStateToPropsForRedirect","auth"],"sourceRoot":""}